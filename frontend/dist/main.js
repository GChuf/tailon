function formatBytes(size){for(var i=0;1024<=size;)size/=1024,++i;return size.toFixed(2)+" "+["B","KB","MB","GB","TB","PB","EB","ZB","YB"][i]}function formatFilename(state){var size;return state.id?(size=formatBytes($(state.element).data("size")),"<span>"+state.text+'</span><span style="float:right;">'+size+"</span>"):state.text}function endsWith(str,suffix){return-1!==str.indexOf(suffix,str.length-suffix.length)}function startsWith(str,prefix){return 0===str.indexOf(prefix)}var escape_entity_map={"&":"&amp;","<":"&lt;",">":"&gt;","/":"&#x2F;"};function escapeHtml(str){return String(str).replace(/[&<>\/]/g,function(s){return escape_entity_map[s]})}function parseQueryString(str){var res={};return str.substr(1).split("&").forEach(function(item){var item=item.split("="),key=item[0],item=item[1]&&decodeURIComponent(item[1]);key in res?res[key].push(item):res[key]=[item]}),res}Vue.component("logview",{template:'<div class="log-view"></div>',props:["linesOfHistory"],data:function(){return{history:[],lastSpan:null,lastSpanClasses:"",autoScroll:!0}},watch:{linesOfHistory:function(val){this.trimHistory()}},methods:{clearLines:function(){this.$el.innerHTML="",this.history=[],this.lastSpan=null},toggleWrapLines:function(val){this.$el.classList.toggle("log-view-wrapped",val)},createSpan:function(innerHtml,classNames){var span=document.createElement("span");return span.innerHTML=innerHtml,span.className=classNames,span},createLogEntrySpan:function(innerHtml){return this.createSpan(innerHtml,"log-entry")},createNoticePan:function(innerHtml){return createSpan(innerHtml,"log-entry log-notice")},trimHistory:function(){if(0!==this.linesOfHistory&&this.history.length>this.linesOfHistory)for(var i=0;i<this.history.length-this.linesOfHistory+1;i++)this.$el.removeChild(this.history.shift())},scroll:function(){window.scrollTo(0,document.body.scrollHeight)},write:function(source,line){"o"===source&&(line=0===line.length?"&nbsp;":escapeHtml(line).replace(/\n$/,""),source=this.createLogEntrySpan(line),this.writeSpans([source]))},writeSpans:function(spanArray){var fragment;0!==spanArray.length&&(fragment=document.createDocumentFragment(),spanArray.forEach(span=>{this.history.push(span),fragment.appendChild(span)}),this.lastSpan&&(this.lastSpan.className=this.lastSpanClasses),this.$el.appendChild(fragment),this.trimHistory(),this.autoScroll&&this.scroll(),this.lastSpan=this.history[this.history.length-1],this.lastSpanClasses=this.lastSpan.className,this.lastSpan.className=this.lastSpanClasses+" log-entry-current")}}}),Vue.component("multiselect",window.VueMultiselect.default),Vue.component("vue-loading",window.VueLoading);var apiURL=endsWith(window.relativeRoot,"/")?"ws":"/ws",apiURL=[window.location.protocol,"//",window.location.host,window.relativeRoot,apiURL].join(""),app=new Vue({el:"#app",delimiters:["<%","%>"],data:{relativeRoot:relativeRoot,commandScripts:commandScripts,fileList:[],allowCommandNames:allowCommandNames,allowDownload:allowDownload,file:null,command:null,script:null,linesOfHistory:linesOfHistory,linesToTail:linesToTail,wrapLines:!1,hideToolbar:!1,showConfig:!1,showLoadingOverlay:!1,socket:null,isConnected:!1},created:function(){this.backendConnect(),this.command=this.allowCommandNames[0]},computed:{scriptInputEnabled:function(){return""!==this.commandScripts[this.command]},downloadLink:function(){return this.file?relativeRoot+"files/?path="+this.file.path:"#"},fileName:function(){return this.file?this.file.path.split("/").at(-1):"#"}},methods:{clearLogview:function(){this.$refs.logview.clearLines()},backendConnect:function(){this.showLoadingOverlay=!0,this.socket=new SockJS(apiURL),this.socket.onopen=this.onBackendOpen,this.socket.onclose=this.onBackendClose,this.socket.onmessage=this.onBackendMessage},onBackendOpen:function(){this.isConnected=!0,this.refreshFiles()},onBackendClose:function(){this.isConnected=!1,backendConnect=this.backendConnect,window.setTimeout(function(){backendConnect()},1e3)},onBackendMessage:function(message){var fileList,line,data=JSON.parse(message.data);data.constructor===Object?(fileList=[],Object.keys(data).forEach(function(key){fileList.push({group:"__default__"===key?"Ungrouped Files":key,files:data[key]})}),this.fileList=fileList,this.file||(this.file=fileList[0].files[0])):(message=data[0],line=data[1],this.$refs.logview.write(message,line))},refreshFiles:function(){this.socket.send("list")},notifyBackend:function(){var msg={command:this.command,script:this.script,entry:this.file,nlines:this.linesToTail};this.clearLogview(),this.socket.send(JSON.stringify(msg))}},watch:{isConnected:function(val){this.showLoadingOverlay=!val},wrapLines:function(val){this.$refs.logview.toggleWrapLines(val)},command:function(val){val&&this.isConnected&&(this.script=this.commandScripts[val],this.notifyBackend())},file:function(val){val&&this.isConnected&&this.notifyBackend()}}});
